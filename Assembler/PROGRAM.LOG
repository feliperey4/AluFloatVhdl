KCPSM3 Assembler log file for program 'program.psm'.
Generated by KCPSM3 version 1.20
Ken Chapman (Xilinx Ltd) 2004.

 Addr Code

 000                       ;================================================================
 000                       ; Port address definitions...
 000                       ;================================================================
 000                       CONSTANT A_0, 00       ; A_0
 000                       CONSTANT A_1, 01       ; A_1
 000                       CONSTANT A_2, 02       ; A_2
 000                       CONSTANT A_3, 03       ; A_3   Float 32 bit
 000                       CONSTANT A_4, 04       ; A_4
 000                       CONSTANT A_5, 05       ; A_5
 000                       CONSTANT A_6, 06       ; A_6
 000                       CONSTANT A_7, 07       ; A_7   Float 64 bit
 000                       CONSTANT A_8, 08       ; A_8
 000                       CONSTANT A_9, 09       ; A_9
 000                       CONSTANT A_10, 0A      ; A_10
 000                       CONSTANT A_11, 0B      ; A_11
 000                       CONSTANT A_12, 0C      ; A_12
 000                       CONSTANT A_13, 0D      ; A_13
 000                       CONSTANT A_14, 0E      ; A_14
 000                       CONSTANT A_15, 0F      ; A_15   Float 128 bit
 000                       CONSTANT B_0, 10       ; B_0
 000                       CONSTANT B_1, 11       ; B_1
 000                       CONSTANT B_2, 12       ; B_2
 000                       CONSTANT B_3, 13       ; B_3   Float 32 bit
 000                       CONSTANT B_4, 14       ; B_4
 000                       CONSTANT B_5, 15       ; B_5
 000                       CONSTANT B_6, 16       ; B_6
 000                       CONSTANT B_7, 17       ; B_7   Float 64 bit
 000                       CONSTANT B_8, 18       ; B_8
 000                       CONSTANT B_9, 19       ; B_9
 000                       CONSTANT B_10, 1A      ; B_10
 000                       CONSTANT B_11, 1B      ; B_11
 000                       CONSTANT B_12, 1C      ; B_12
 000                       CONSTANT B_13, 1D      ; B_13
 000                       CONSTANT B_14, 1E      ; B_14
 000                       CONSTANT B_15, 1F      ; B_15   Float 128 bit
 000                       CONSTANT C_0, 20       ; C_0
 000                       CONSTANT C_1, 21       ; C_1
 000                       CONSTANT C_2, 22       ; C_2
 000                       CONSTANT C_3, 23       ; C_3   Float 32 bit
 000                       CONSTANT C_4, 24       ; C_4
 000                       CONSTANT C_5, 25       ; C_5
 000                       CONSTANT C_6, 26       ; C_6
 000                       CONSTANT C_7, 27       ; C_7   Float 64 bit
 000                       CONSTANT C_8, 28       ; C_8
 000                       CONSTANT C_9, 29       ; C_9
 000                       CONSTANT C_10, 2A      ; C_10
 000                       CONSTANT C_11, 2B      ; C_11
 000                       CONSTANT C_12, 2C      ; C_12
 000                       CONSTANT C_13, 2D      ; C_13
 000                       CONSTANT C_14, 2E      ; C_14
 000                       CONSTANT C_15, 2F      ; C_15   Float 128 bit
 000                       CONSTANT OP, 30        ; Byte de operacion
 000                       ; OPERACIONES
 000                       CONSTANT SUMA, 00      ;
 000                       CONSTANT RESTA, 01     ;
 000                       CONSTANT MULT, 02      ;
 000                       ;================================================================
 000                       ; Actual assembly program goes here...
 000                       ;================================================================
 000  3C001                ENABLE INTERRUPT
 001                       ; Suma
 001                       ; 0,25 + 100 = 100,25 ......  X"3E 80 00 00" + X"42 C8 00 00" = X"42 c8 80 00"
 001                       ; Escribe Operando A
 001  00100                LOAD s1, 00
 002  2C100                OUTPUT s1, A_0[00]
 003  00100                LOAD s1, 00
 004  2C101                OUTPUT s1, A_1[01]
 005  00180                LOAD s1, 80
 006  2C102                OUTPUT s1, A_2[02]
 007  0013E                LOAD s1, 3E
 008  2C103                OUTPUT s1, A_3[03]
 009                       ; Escribe Operando B
 009  00100                LOAD s1, 00
 00A  2C110                OUTPUT s1, B_0[10]
 00B  00100                LOAD s1, 00
 00C  2C111                OUTPUT s1, B_1[11]
 00D  001C8                LOAD s1, C8
 00E  2C112                OUTPUT s1, B_2[12]
 00F  00142                LOAD s1, 42
 010  2C113                OUTPUT s1, B_3[13]
 011                       ; Escribe operacion
 011  00100                LOAD s1, SUMA[00]
 012  2C130                OUTPUT s1, OP[30]
 013                       ; Multiplicacion
 013                       ; FF7DF39A * 3F50AB0A = FF4EFF98
 013                       ; Escribe Operando A
 013  0019A                LOAD s1, 9A
 014  2C100                OUTPUT s1, A_0[00]
 015  001F3                LOAD s1, F3
 016  2C101                OUTPUT s1, A_1[01]
 017  0017D                LOAD s1, 7D
 018  2C102                OUTPUT s1, A_2[02]
 019  001FF                LOAD s1, FF
 01A  2C103                OUTPUT s1, A_3[03]
 01B                       ; Escribe Operando B
 01B  0010A                LOAD s1, 0A
 01C  2C110                OUTPUT s1, B_0[10]
 01D  001AB                LOAD s1, AB
 01E  2C111                OUTPUT s1, B_1[11]
 01F  00150                LOAD s1, 50
 020  2C112                OUTPUT s1, B_2[12]
 021  0013F                LOAD s1, 3F
 022  2C113                OUTPUT s1, B_3[13]
 023                       ; Escribe operacion
 023  00102                LOAD s1, MULT[02]
 024  2C130                OUTPUT s1, OP[30]
 025                       ; Resta
 025                       ;3D8B4F71 - BEADD650 = 3ED0AA2C
 025                       ; Escribe Operando A
 025  00171                LOAD s1, 71
 026  2C100                OUTPUT s1, A_0[00]
 027  0014F                LOAD s1, 4F
 028  2C101                OUTPUT s1, A_1[01]
 029  0018B                LOAD s1, 8B
 02A  2C102                OUTPUT s1, A_2[02]
 02B  0013D                LOAD s1, 3D
 02C  2C103                OUTPUT s1, A_3[03]
 02D                       ; Escribe Operando B
 02D  00150                LOAD s1, 50
 02E  2C110                OUTPUT s1, B_0[10]
 02F  001D6                LOAD s1, D6
 030  2C111                OUTPUT s1, B_1[11]
 031  001AD                LOAD s1, AD
 032  2C112                OUTPUT s1, B_2[12]
 033  001BE                LOAD s1, BE
 034  2C113                OUTPUT s1, B_3[13]
 035                       ; Escribe operacion
 035  00101                LOAD s1, RESTA[01]
 036  2C130                OUTPUT s1, OP[30]
 037             INFINITO: 
 037  34037                JUMP INFINITO[037]
 038                       ;================================================================
 038                       ;  Interrupciones AluFLoat
 038                       ;================================================================
 2B0                       ADDRESS 2B0
 2B0         int_AluFloat: 
 2B0  04020                INPUT s0, C_0[20]
 2B1  04021                INPUT s0, C_1[21]
 2B2  04022                INPUT s0, C_2[22]
 2B3  04023                INPUT s0, C_3[23]
 2B4  38001                RETURNI ENABLE
 2B5                       ;================================================================
 2B5                       ; Control de interrupciones
 2B5                       ;================================================================
 2B5                       ;------- Manager interrupts
 3FF                       ADDRESS 3FF
 3FF  342B0                JUMP int_AluFloat[2B0]
 3FF                       ;================================================================
 3FF                       ;
 3FF                       ;================================================================
